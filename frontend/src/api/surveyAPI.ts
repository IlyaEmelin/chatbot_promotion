import { 
  CreateSurveyRequest, 
  CreateSurveyResponse, 
  Survey, 
  SubmitAnswerRequest, 
  SubmitAnswerResponse 
} from '../types';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';

console.log('üîß API Configuration:', { API_BASE_URL });

export const surveyAPI = {
  // POST /api/v1/surveys/ - —Å–æ–∑–¥–∞–Ω–∏–µ/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
  createSurvey: async (restart_question: boolean = false): Promise<CreateSurveyResponse> => {
    const requestBody: CreateSurveyRequest = {
      restart_question,
      status: "new",
      result: {}
    };

    console.log('üì§ API Request: POST /surveys/', requestBody);

    const response = await fetch(`${API_BASE_URL}/surveys/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üì• API Response: POST /surveys/', data);
    return data;
  },

  // GET /api/v1/surveys/ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤
  getSurveys: async (): Promise<Survey[]> => {
    console.log('üì§ API Request: GET /surveys/');

    const response = await fetch(`${API_BASE_URL}/surveys/`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üì• API Response: GET /surveys/', data);
    return data;
  },

  // PUT /api/v1/surveys/{id}/ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
  submitAnswer: async (surveyId: string, answer: string): Promise<SubmitAnswerResponse> => {
    const requestBody: SubmitAnswerRequest = {
      answer
    };

    console.log(`üì§ API Request: PUT /surveys/${surveyId}/`, requestBody);

    const response = await fetch(`${API_BASE_URL}/surveys/${surveyId}/`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    }
    
    const data = await response.json();
    console.log(`üì• API Response: PUT /surveys/${surveyId}/`, data);
    return data;
  },

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å endpoint)
  uploadFile: async (file: File): Promise<{ url: string }> => {
    const formData = new FormData();
    formData.append('file', file);
    
    console.log('üì§ API Request: POST /upload/', { fileName: file.name, fileSize: file.size });
    
    const response = await fetch(`${API_BASE_URL}/upload/`, {
      method: 'POST',
      body: formData,
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üì• API Response: POST /upload/', data);
    return data;
  },
};
