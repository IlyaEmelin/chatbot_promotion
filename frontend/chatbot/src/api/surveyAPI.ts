// src/api/surveyAPI.ts - –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô –ò –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–£–¢–Ø–ú–ò
import { 
  CreateSurveyRequest, 
  CreateSurveyResponse, 
  Survey, 
  SubmitAnswerRequest, 
  SubmitAnswerResponse 
} from '../types';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏
function getCookie(name: string): string | undefined {
  const matches = document.cookie.match(
    new RegExp('(?:^|; )' + name.replace(/([$?*|{}()[\]\\/+^])/g, '\\$1') + '=([^;]*)')
  );
  return matches ? decodeURIComponent(matches[1]) : undefined;
}

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000/api';

console.log('üîß API Configuration:', { API_BASE_URL });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
function getAuthHeaders(extraHeaders: Record<string, string> = {}): Record<string, string> {
  const accessToken = getCookie('auth_token');
  
  return {
    ...extraHeaders,
    ...(accessToken ? { Authorization: `Token ${accessToken}` } : {}),
  };
}

export const surveyAPI = {
  // POST /api/v1/surveys/ - —Å–æ–∑–¥–∞–Ω–∏–µ/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
  createSurvey: async (restart_question: boolean = false): Promise<CreateSurveyResponse> => {
    const requestBody: CreateSurveyRequest = {
      restart_question,
      status: "new",
      result: {}
    };

    console.log('üì§ API Request: POST /v1/surveys/', requestBody);

    const response = await fetch(`${API_BASE_URL}/v1/surveys/`, {
      method: 'POST',
      headers: getAuthHeaders({
        'Content-Type': 'application/json',
      }),
      body: JSON.stringify(requestBody),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üì• API Response: POST /v1/surveys/', data);
    return data;
  },

  // GET /api/v1/surveys/ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤
  getSurveys: async (): Promise<Survey[]> => {
    console.log('üì§ API Request: GET /v1/surveys/');

    const response = await fetch(`${API_BASE_URL}/v1/surveys/`, {
      method: 'GET',
      headers: getAuthHeaders({
        'Content-Type': 'application/json',
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üì• API Response: GET /v1/surveys/', data);
    return data;
  },

  // PUT /api/v1/surveys/{id}/ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
  submitAnswer: async (surveyId: string, answer: string): Promise<SubmitAnswerResponse> => {
    const requestBody: SubmitAnswerRequest = {
      answer
    };

    console.log(`üì§ API Request: PUT /v1/surveys/${surveyId}/`, requestBody);

    const response = await fetch(`${API_BASE_URL}/v1/surveys/${surveyId}/`, {
      method: 'PUT',
      headers: getAuthHeaders({
        'Content-Type': 'application/json',
      }),
      body: JSON.stringify(requestBody),
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    }
    
    const data = await response.json();
    console.log(`üì• API Response: PUT /v1/surveys/${surveyId}/`, data);
    return data;
  },

  // POST /api/v1/upload/ - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  uploadFile: async (file: File): Promise<{ url: string }> => {
    const formData = new FormData();
    formData.append('file', file);
    
    console.log('üì§ API Request: POST /v1/upload/', { fileName: file.name, fileSize: file.size });
    
    const response = await fetch(`${API_BASE_URL}/v1/upload/`, {
      method: 'POST',
      headers: getAuthHeaders(), // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º Content-Type –¥–ª—è FormData
      body: formData,
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üì• API Response: POST /v1/upload/', data);
    return data;
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { getCookie, getAuthHeaders };