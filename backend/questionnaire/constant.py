from typing import Final
from enum import Enum, StrEnum

MAX_LEN_STRING: Final = 40
STATUS_LEN: Final = 25
ANSWER_LEN: Final = 30
QUESTION_TYPE_LEN: Final = 30
FILE_URL_MAX_LEN = 2048


class TelegramCommand(Enum):
    """–ö–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–æ–º–∞–Ω–¥"""

    START = ("start", "–ü—Ä–æ–π—Ç–∏(–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏) –æ–ø—Ä–æ—Å")
    STATUS = ("status", "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞")
    PROCESSING = ("processing", "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    HELP = ("help", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏")
    LOG = ("log", "–°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")

    def __init__(
        self,
        value: str,
        help_msg: str,
    ):
        self.__value = value
        self.__help_msg = help_msg

    @property
    def value(self) -> str:
        """str: –∑–Ω–∞—á–µ–Ω–∏–µ"""
        return self.__value

    def get_call_name(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è

        Returns:
            str: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è
        """
        return f"/{self.value}"

    def get_text_command(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã

        Returns:
            str: —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        """
        return f"{self.get_call_name()} - {self.__help_msg}"


class SurveyStatus(Enum):
    NEW = (
        "new",
        "–ù–æ–≤–∞—è",
        "üÜï",
        (
            TelegramCommand.START,
            TelegramCommand.STATUS,
            TelegramCommand.HELP,
        ),
    )
    WAITING_DOCS = (
        "waiting_docs",
        "–û–∂–∏–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        "üìé",
        (
            TelegramCommand.START,
            TelegramCommand.PROCESSING,
            TelegramCommand.STATUS,
            TelegramCommand.HELP,
        ),
    )
    PROCESSING = (
        "processing",
        "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "‚è≥",
        (
            TelegramCommand.START,
            TelegramCommand.STATUS,
            TelegramCommand.HELP,
        ),
    )
    COMPLETED = (
        "completed",
        "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "‚úÖ",
        (
            TelegramCommand.START,
            TelegramCommand.STATUS,
            TelegramCommand.HELP,
        ),
    )

    def __init__(
        self,
        value: str,
        label: str,
        icon: str,
        available_commands: tuple[TelegramCommand, ...],
    ) -> None:
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

        Args:
            value: –∑–Ω–∞—á–µ–Ω–∏–µ
            label: –æ–ø–∏—Å–∞–Ω–∏–µ
            icon: –∏–∫–æ–Ω–∫–∞
            available_commands: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥
        """
        self.__value = value
        self.__label = label
        self.__icon = icon
        self.__available_commands = available_commands

    @property
    def value(self) -> str:
        """str: –∑–Ω–∞—á–µ–Ω–∏–µ"""
        return self.__value

    @property
    def label(self) -> str:
        """str: –æ–ø–∏—Å–∞–Ω–∏–µ"""
        return self.__label

    @property
    def ext_label(self) -> str:
        """str: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        return f"{self.__icon} {self.__label}"

    @property
    def available_commands(self) -> tuple[TelegramCommand, ...]:
        """tuple[TelegramCommand, ...]: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return self.__available_commands

    @classmethod
    def choices(cls) -> tuple[tuple[str, str], ...]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö Django"""
        return tuple((status.value, status.label) for status in cls)

    @classmethod
    def from_value(cls, value: str) -> "SurveyStatus":
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç Enum –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é value

        Args:
            value: –∑–Ω–∞—á–µ–Ω–∏–µ

        Returns:
            SurveyStatus: —ç–∫–∑–µ–º–ø–ª—è—Ä enum
        """
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç Enum –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é value"""
        for status in cls:
            if status.value == value:
                return status
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {value}")

    @classmethod
    def get_ext_label(cls, value: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é value

        Args:
            value: –∑–Ω–∞—á–µ–Ω–∏–µ

        Returns:
            str: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        """
        try:
            return cls.from_value(value).ext_label
        except ValueError:
            return "‚ùå –û—à–∏–±–∫–∞"


QUESTION_TYPE = [
    ("standart", "C—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
    ("start", "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"),
    ("waiting_docs", "–û–∂–∏–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
]

EXTERNAL_TABLE_FIELD_NAME_CHOICES = [
    ("User.first_name", "–ò–º—è"),
    ("User.last_name", "–§–∞–º–∏–ª–∏—è"),
    ("User.patronymic", "–û—Ç—á–µ—Å—Ç–≤–æ"),
    ("User.ward_first_name", "–ò–º—è"),
    ("User.ward_last_name", "–§–∞–º–∏–ª–∏—è"),
    ("User.ward_patronymic", "–û—Ç—á–µ—Å—Ç–≤–æ"),
    ("User.residence", "–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"),
    ("User.phone_number", "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"),
    ("User.email", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"),
    ("User.telegram_username", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º"),
    ("User.birthday", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)"),
]
