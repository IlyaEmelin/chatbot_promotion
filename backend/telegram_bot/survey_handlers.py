import logging
from asgiref.sync import sync_to_async

from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from telegram import (
    Update,
    User as TelegramUser,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import ContextTypes

from questionnaire.models import Survey, Question
from api.v1.serializers import (
    SurveyUpdateSerializer,
    SurveyCreateSerializer,
)
from .menu_handlers import help_command

logger = logging.getLogger(__name__)


User = get_user_model()


@sync_to_async
def __save_survey_data(
    user_obj: User,
    survey_obj: Survey,
    user_message: str,
) -> tuple[str, list[None | str]]:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å "–û–ø—Ä–æ—Å" —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä

    Args:
        survey_obj: –æ–ø—Ä–æ—Å,
        user_message: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        str: –í–æ–ø—Ä–æ—Å
        list[None|str]: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    """
    serializer = SurveyUpdateSerializer(
        instance=survey_obj,
        data={"answer": user_message},
        partial=True,
    )
    serializer.is_valid(raise_exception=True)
    serializer.save(user=user_obj)
    data = serializer.data
    return (
        data.get("current_question_text"),
        data.get("answers"),
    )


@sync_to_async
def _get_or_create_user(user: TelegramUser) -> User:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user:

    Returns:

    """
    user_obj, created = User.objects.get_or_create(
        telegram_username=user.username,
        defaults={
            "first_name": user.first_name or "",
            "last_name": user.last_name or "",
            # TODO –ü—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–µ—Ç—Å—è –Ω–æ –ø–æ—Ç–æ–º –ø—Ä–æ—Å—è—Ç –∑–∞–¥–∞—Ç—å
            "password": "unusable_password",
        },
    )
    if created:
        logger.debug("–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", user_obj)
    return user_obj


@sync_to_async
def __get_start_question() -> Question | None:
    """
    –°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å

    Returns:
        Question | None: –≤–æ–ø—Ä–æ—Å
    """
    return Question.objects.filter(type="start_telegram").first()


@sync_to_async
def _get_or_create_survey(user_obj: User, restart_question: bool) -> tuple[
    str,
    list[str | None],
    list[str],
    Survey,
]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å

    Args:
        user_obj: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        restart_question: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å

    Returns:
        str: —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        list[str|None]: –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        list[str]: –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        Survey: –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
    """
    create_serializer = SurveyCreateSerializer(
        data={"restart_question": restart_question},
    )
    create_serializer.is_valid(raise_exception=True)
    create_serializer.save(user=user_obj)
    data = create_serializer.data
    return (
        data.get("current_question_text"),
        data.get("answers"),
        data.get("result"),
        create_serializer.instance,
    )


# .instance


def _get_reply_markup(answers: list[str]) -> ReplyKeyboardMarkup | None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    Args:
        answers: —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤

    Returns:
        ReplyKeyboardMarkup | None: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    """
    reply_markup = None
    if answers:
        keyboard = [[KeyboardButton(answer)] for answer in answers if answer]
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=True,
        )
    return reply_markup


async def start_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏
    """
    user = update.effective_user

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n" "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤!\n\n"
    )
    try:
        user_obj = await _get_or_create_user(user)
        text, answers, _, __ = await _get_or_create_survey(user_obj, True)
        welcome_text += text
        reply_markup = _get_reply_markup(answers)
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
        )
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ start_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def status_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    user = update.effective_user
    try:
        user_obj = await _get_or_create_user(user)
        _, __, result, ___ = await _get_or_create_survey(user_obj, False)

        await update.message.reply_text(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:" if result else "–û–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        )
        if result:
            for i, text in enumerate(result):
                await update.message.reply_text(
                    f"‚úÖ –û—Ç–≤–µ—Ç:\n    {text}"
                    if i % 2
                    else f"‚ùì –í–æ–ø—Ä–æ—Å:\n    {text}"
                )
        await help_command(update, context)
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ status_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message: str = update.message.text
    user: TelegramUser = update.effective_user

    logger.debug(
        "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (%s): %s",
        user.first_name,
        user.username,
        user_message,
    )

    try:
        user_obj = await _get_or_create_user(user)

        __, ___, ____, survey_obj = await _get_or_create_survey(
            user_obj, False
        )
        logger.debug(f"–°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞: {survey_obj.status}")
        if survey_obj.status == "new":
            try:
                text, answers = await __save_survey_data(
                    user_obj,
                    survey_obj,
                    user_message,
                )
            except ValidationError as exp:
                text, answers = "\n".join(exp.messages), []

            reply_markup = _get_reply_markup(answers)
            if text:
                await update.message.reply_text(
                    text,
                    reply_markup=reply_markup,
                )
                return

        await update.message.reply_text("–û–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ–Ω!")
        await help_command(update, context)
        return

    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ handle_message: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
