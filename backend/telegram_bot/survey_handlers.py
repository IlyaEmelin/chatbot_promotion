import logging
import base64

from django.conf import settings
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from telegram import (
    Update,
    User as TelegramUser,
    KeyboardButton,
    ReplyKeyboardMarkup,
    File,
)
from telegram.ext import ContextTypes

from questionnaire.models import Survey
from questionnaire.constant import SurveyStatus
from .menu_handlers import help_command, load_command
from .sync_to_async import (
    write_document_db,
    save_survey_data,
    get_or_create_user,
    change_processing,
    get_or_create_survey,
    get_survey_documents,
)
from .const import (
    START_COMMAND_NAME,
)

logger = logging.getLogger(__name__)


User = get_user_model()

FILETYPE_ERROR = "–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
SIGNATURES_MIMETYPES = {
    b"\xff\xd8\xff": "image/jpeg",
    b"\x89PNG\r\n\x1a\n": "image/png",
    b"%PDF": "application/pdf",
}


class FileTypeError(Exception):
    """–ö–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤."""


async def telegram_file_to_base64_image_field(file: File) -> tuple[str, bool]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Telegram File –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Base64ImageField
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: data:image/jpeg;base64,{base64_data}
    """

    def get_mime_from_signature(binary_data):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME-—Ç–∏–ø –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º —Ñ–∞–π–ª–æ–≤"""
        for signature, mime_type in SIGNATURES_MIMETYPES.items():
            if binary_data.startswith(signature):
                return mime_type
        raise FileTypeError(FILETYPE_ERROR)

    file_bytes = await file.download_as_bytearray()
    mime_type = get_mime_from_signature(file_bytes)
    base64_data = base64.b64encode(file_bytes).decode("utf-8")
    data_uri = f"data:{mime_type};base64,{base64_data}"
    return data_uri, mime_type == SIGNATURES_MIMETYPES[b"%PDF"]


async def _save_document(
    survey_obj: Survey,
    document_file,
) -> tuple[bool, int | None, bool | None]:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Telegram

    Args:
        survey_obj: –æ–ø—Ä–æ—Å
        document_file: —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ Telegram

    Returns:
        bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        int: —Ñ–∞–π–ª id
    """
    try:
        file = await document_file.get_file()
        base64_string, is_pdf = await telegram_file_to_base64_image_field(file)
        await write_document_db(survey_obj, base64_string)
        logger.debug(
            "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–ø—Ä–æ—Å–∞ %s",
            survey_obj.id,
        )
        return True, document_file.file_id, is_pdf
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}",
            exc_info=True,
        )
        return False, None, None


def _get_reply_markup(answers: list[str]) -> ReplyKeyboardMarkup | None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    Args:
        answers: —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤

    Returns:
        ReplyKeyboardMarkup | None: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    """
    keyboard = [[KeyboardButton(answer)] for answer in answers if answer]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    return reply_markup


async def _inform_msg(survey_obj: Survey, update) -> None:
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞

    Args:
        survey_obj:
        update:
    """
    match survey_obj.status:
        case SurveyStatus.NEW.value:
            await update.message.reply_text(
                "üìù –û–ø—Ä–æ—Å –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{START_COMMAND_NAME} –¥–ª—è "
                "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞."
            )
        case SurveyStatus.PROCESSING.value:
            await update.message.reply_text(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
                "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è."
            )
        case SurveyStatus.COMPLETED.value:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–æ - –≤—Å–µ –≥–æ—Ç–æ–≤–æ
            await update.message.reply_text(
                "üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{START_COMMAND_NAME} –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞."
            )


async def start_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏
    """
    user = update.effective_user

    try:
        user_obj = await get_or_create_user(user)
        text, answers, _, __ = await get_or_create_survey(user_obj, True)
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤!\n\n"
        ) + (text or "")
        reply_markup = _get_reply_markup(answers)
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
        )
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ start_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def status_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    user = update.effective_user
    try:
        user_obj = await get_or_create_user(user)
        _, __, result, survey = await get_or_create_survey(user_obj, False)

        await update.message.reply_text(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:" if result else "–û–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        )
        if result:
            for i, text in enumerate(result):
                await update.message.reply_text(
                    f"‚úÖ –û—Ç–≤–µ—Ç:\n    {text}"
                    if i % 2
                    else f"‚ùì –í–æ–ø—Ä–æ—Å:\n    {text}"
                )

        logger.debug("–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        if documents := await get_survey_documents(survey):
            await update.message.reply_text("üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            for select_doc in (doc for doc in documents if doc.image):
                try:
                    await update.message.reply_photo(photo=select_doc.image)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")

        await help_command(update, context, status=survey.status)
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ status_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def load_document_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    survey_obj: Survey = None,
) -> None:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Args:
        update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
        survey_obj: –æ–ø—Ä–æ—Å
    """
    try:
        if survey_obj is None:
            user: TelegramUser = update.effective_user
            user_obj = await get_or_create_user(user)

            __, ___, ____, survey_obj = await get_or_create_survey(
                user_obj, False
            )
        logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞")
        await _inform_msg(survey_obj, update)
        logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        doc_image = None
        if update.message.photo:
            logger.debug(
                "–ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)"
            )
            doc_image = update.message.photo[-1]
        if update.message.document:
            logger.debug("–ë–µ—Ä–µ–º –¥–æ–∫—É–º–µ–Ω—Ç PDF")
            doc_image = update.message.document
        if not doc_image:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ."
            )
            await load_command(update, context)
            return

        result, file_id, is_pdf = await _save_document(survey_obj, doc_image)
        await load_command(
            update,
            context,
            load_result=result,
            photo_file_id=file_id,
            is_pdf=is_pdf,
        )
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ load_document_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await load_command(update, context)


async def processing_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ

    Args:
        update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        user: TelegramUser = update.effective_user
        user_obj = await get_or_create_user(user)

        __, ___, ____, survey_obj = await get_or_create_survey(user_obj, False)
        logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞")
        await _inform_msg(survey_obj, update)
        logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞")
        await change_processing(survey_obj)
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        await help_command(update, context, status=survey_obj.status)
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ processing_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await load_command(update, context)


async def handle_message(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    Args:
        update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    user_message: str = update.message.text
    user: TelegramUser = update.effective_user

    logger.debug(
        "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (%s): %s",
        user.first_name,
        user.username,
        user_message,
    )

    try:
        user_obj = await get_or_create_user(user)

        __, ___, ____, survey_obj = await get_or_create_survey(user_obj, False)
        logger.debug(f"–°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞: {survey_obj.status}")
        match survey_obj.status:
            case SurveyStatus.NEW.value:
                logger.debug("–û–ø—Ä–æ—Å")
                new_status = None
                try:
                    text, answers, new_status = await save_survey_data(
                        user_obj,
                        survey_obj,
                        user_message,
                    )
                    if (
                        settings.TELEGRAM_SHOW_RESPONSE_CHOICE
                        and answers
                        and None not in answers
                    ):
                        logger.debug("–ü–æ–¥–∫–ª–µ–π–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞")
                        text += "\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n"
                        text += "\n".join(
                            f"üîò - {answer}" for answer in answers
                        )
                except ValidationError as exp:
                    text, answers = "\n".join(exp.messages), []

                reply_markup = _get_reply_markup(answers)
                if text:
                    await update.message.reply_text(
                        text,
                        reply_markup=reply_markup,
                    )
                    if survey_obj.status == "waiting_docs":
                        await load_command(update, context)
                    return
                elif new_status != "waiting_docs":
                    await help_command(update, context, new_status)
                else:
                    await load_command(update, context)
            case "waiting_docs":
                logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                await load_command(update, context)
            case _:
                await help_command(update, context, status=survey_obj.status)
        return

    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ handle_message: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
