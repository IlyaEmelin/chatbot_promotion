import logging
import base64
import imghdr

from asgiref.sync import sync_to_async

from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.core.files.base import ContentFile
from telegram import (
    Update,
    User as TelegramUser,
    KeyboardButton,
    ReplyKeyboardMarkup,
    File,
)
from telegram.ext import ContextTypes

from questionnaire.models import Survey, Question, Document
from api.v1.serializers import (
    SurveyUpdateSerializer,
    SurveyCreateSerializer,
    DocumentSerializer,
)
from .menu_handlers import help_command, load_command

logger = logging.getLogger(__name__)


User = get_user_model()


@sync_to_async
def _write_document_db(
    survey_obj: Survey,
    content_file: ContentFile,
) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É

    Args:
        survey_obj: –æ–ø—Ä–æ—Å
        content_file: —Ñ–∞–π–ª
    """
    serializer = DocumentSerializer(
        data={
            "image": content_file,
        },
        context={"user": survey_obj.user},
    )
    serializer.is_valid(raise_exception=True)
    serializer.save(survey=survey_obj)


async def telegram_file_to_base64_image_field(file: File) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Telegram File –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Base64ImageField
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: data:image/jpeg;base64,{base64_data}
    """
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∞–π—Ç—ã
    file_bytes = await file.download_as_bytearray()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_format = imghdr.what(None, h=file_bytes)
    if not image_format:
        # –ï—Å–ª–∏ imghdr –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª, –ø—Ä–æ–±—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        image_format = "jpeg"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ú–∞–ø–ø–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è MIME —Ç–∏–ø–æ–≤
    mime_types = {
        "jpeg": "image/jpeg",
        "jpg": "image/jpeg",
        "png": "image/png",
        "gif": "image/gif",
        "bmp": "image/bmp",
        "webp": "image/webp",
    }

    mime_type = mime_types.get(image_format, "image/jpeg")

    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    base64_data = base64.b64encode(file_bytes).decode("utf-8")

    # –§–æ—Ä–º–∏—Ä—É–µ–º data URI
    data_uri = f"data:{mime_type};base64,{base64_data}"
    return data_uri


async def _save_document(
    survey_obj: Survey,
    document_file,
) -> tuple[bool, int | None]:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Telegram

    Args:
        survey_obj: –æ–ø—Ä–æ—Å
        document_file: —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ Telegram

    Returns:
        bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        int: —Ñ–∞–π–ª id
    """
    try:
        file = await document_file.get_file()
        base64_string = await telegram_file_to_base64_image_field(file)
        await _write_document_db(survey_obj, base64_string)
        logger.debug(
            f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–ø—Ä–æ—Å–∞ %s",
            survey_obj.id,
        )
        return True, document_file.file_id
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}",
            exc_info=True,
        )
        return False, None


@sync_to_async
def __save_survey_data(
    user_obj: User,
    survey_obj: Survey,
    user_message: str,
) -> tuple[str, list[None | str]]:
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å "–û–ø—Ä–æ—Å" —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä

    Args:
        survey_obj: –æ–ø—Ä–æ—Å,
        user_message: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        str: –í–æ–ø—Ä–æ—Å
        list[None|str]: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    """
    serializer = SurveyUpdateSerializer(
        instance=survey_obj,
        data={
            "answer": user_message,
            "add_telegram": False,
        },
        partial=True,
    )
    serializer.is_valid(raise_exception=True)
    serializer.save(user=user_obj)
    data = serializer.data
    return (
        data.get("current_question_text"),
        data.get("answers"),
    )


@sync_to_async
def _get_or_create_user(user: TelegramUser) -> User:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user:

    Returns:

    """
    user_obj, created = User.objects.get_or_create(
        telegram_username="@" + user.username,
        defaults={
            "username": user.username,
            "telegram_username": "@" + user.username,
            "first_name": user.first_name or "",
            "last_name": user.last_name or "",
            # TODO –ü—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–µ—Ç—Å—è –Ω–æ –ø–æ—Ç–æ–º –ø—Ä–æ—Å—è—Ç –∑–∞–¥–∞—Ç—å
            "password": "unusable_password",
        },
    )
    if created:
        logger.debug("–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", user_obj)
    return user_obj


@sync_to_async
def __get_start_question() -> Question | None:
    """
    –°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å

    Returns:
        Question | None: –≤–æ–ø—Ä–æ—Å
    """
    return Question.objects.filter(type="start_telegram").first()


@sync_to_async
def _change_processing(survey_obj: Survey) -> None:
    """
    –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ <–í –æ–±—Ä–∞–±–æ—Ç–∫–µ>

    Args:
        survey_obj: –æ–±—ä–µ–∫—Ç –æ–ø—Ä–æ—Å–∞
    """
    survey_obj.status = "processing"
    survey_obj.save()


@sync_to_async
def _get_or_create_survey(
    user_obj: User,
    restart_question: bool,
) -> tuple[
    str,
    list[str | None],
    list[str],
    Survey,
]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å

    Args:
        user_obj: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        restart_question: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å

    Returns:
        str: —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        list[str|None]: –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        list[str]: –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        Survey: –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
    """
    create_serializer = SurveyCreateSerializer(
        data={"restart_question": restart_question},
    )
    create_serializer.is_valid(raise_exception=True)
    create_serializer.save(user=user_obj)
    data = create_serializer.data
    return (
        data.get("current_question_text"),
        data.get("answers"),
        data.get("result"),
        create_serializer.instance,
    )


@sync_to_async
def _get_survey_documents(survey_obj: Survey) -> list[Document]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–ø—Ä–æ—Å–∞

    Args:
        survey_obj: –æ–±—ä–µ–∫—Ç –æ–ø—Ä–æ—Å–∞

    Returns:
        list: —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    documents = survey_obj.docs.all()
    return list(documents)


def _get_reply_markup(answers: list[str]) -> ReplyKeyboardMarkup | None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    Args:
        answers: —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤

    Returns:
        ReplyKeyboardMarkup | None: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    """
    reply_markup = None
    if answers:
        keyboard = [[KeyboardButton(answer)] for answer in answers if answer]
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=True,
        )
    return reply_markup


async def start_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏
    """
    user = update.effective_user

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n" "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤!\n\n"
    )
    try:
        user_obj = await _get_or_create_user(user)
        text, answers, _, __ = await _get_or_create_survey(user_obj, True)
        welcome_text += text
        reply_markup = _get_reply_markup(answers)
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
        )
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ start_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def status_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    user = update.effective_user
    try:
        user_obj = await _get_or_create_user(user)
        _, __, result, survey = await _get_or_create_survey(user_obj, False)

        await update.message.reply_text(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:" if result else "–û–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        )
        if result:
            for i, text in enumerate(result):
                await update.message.reply_text(
                    f"‚úÖ –û—Ç–≤–µ—Ç:\n    {text}"
                    if i % 2
                    else f"‚ùì –í–æ–ø—Ä–æ—Å:\n    {text}"
                )

        logger.debug("–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        if documents := await _get_survey_documents(survey):
            await update.message.reply_text("üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            for select_doc in (doc for doc in documents if doc.image):
                try:
                    await update.message.reply_photo(photo=select_doc.image)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")

        status_text = {
            "new": "üÜï –ù–æ–≤–∞—è",
            "waiting_docs": "üìé –û–∂–∏–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "processing": "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        }.get(survey.status, "‚ùå –û—à–∏–±–∫–∞")

        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status_text}"
        )
        await help_command(update, context)
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ status_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def load_document_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    survey_obj: Survey = None,
) -> None:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Args:
        update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
        survey_obj: –æ–ø—Ä–æ—Å
    """
    try:
        if survey_obj is None:
            user: TelegramUser = update.effective_user
            user_obj = await _get_or_create_user(user)

            __, ___, ____, survey_obj = await _get_or_create_survey(
                user_obj, False
            )

        logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞")
        if survey_obj.status != "waiting_docs":
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø—Ä–æ—Å, –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞."
            )
            return

        logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ")
        photo = None
        if update.message.photo:
            logger.debug(
                "–ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)"
            )
            photo = update.message.photo[-1]

        if not photo:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ."
            )
            await load_command(update, context)
            return

        result, file_id = await _save_document(survey_obj, photo)

        await load_command(
            update,
            context,
            load_result=result,
            photo_file_id=file_id,
        )
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ load_document_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await load_command(update, context)


async def processing_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ

    Args:
        update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        user: TelegramUser = update.effective_user
        user_obj = await _get_or_create_user(user)

        __, ___, ____, survey_obj = await _get_or_create_survey(
            user_obj, False
        )
        logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞")
        if survey_obj.status != "waiting_docs":
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø—Ä–æ—Å, –∑–∞—Ç–µ–º —Å–º–µ–Ω—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞."
            )
            return
        logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞")
        await _change_processing(survey_obj)
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        await help_command(update, context)
    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ processing_command: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await load_command(update, context)


async def handle_message(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message: str = update.message.text
    user: TelegramUser = update.effective_user

    logger.debug(
        "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (%s): %s",
        user.first_name,
        user.username,
        user_message,
    )

    try:
        user_obj = await _get_or_create_user(user)

        __, ___, ____, survey_obj = await _get_or_create_survey(
            user_obj, False
        )
        logger.debug(f"–°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞: {survey_obj.status}")
        match survey_obj.status:
            case "new":
                logger.debug("–û–ø—Ä–æ—Å")
                try:
                    text, answers = await __save_survey_data(
                        user_obj,
                        survey_obj,
                        user_message,
                    )
                except ValidationError as exp:
                    text, answers = "\n".join(exp.messages), []

                reply_markup = _get_reply_markup(answers)
                if text:
                    await update.message.reply_text(
                        text,
                        reply_markup=reply_markup,
                    )
                    return
                else:
                    await load_command(update, context)
            case "waiting_docs":
                logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                await load_command(update, context)
            case _:
                await help_command(update, context)
        return

    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ handle_message: %s",
            str(e),
            exc_info=True,
        )
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
