import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from questionnaire.constant import SurveyStatus
from .const import TelegramCommand
from .sync_to_async import (
    get_or_create_user,
    get_or_create_survey,
)


logger = logging.getLogger(__name__)


def _get_default_help_keyboard(status) -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏

    Args:
        status: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞

    Returns:
        ReplyKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏
    """
    keyboard = [
        [KeyboardButton(TelegramCommand.START.get_call_name())],
        [KeyboardButton(TelegramCommand.STATUS.get_call_name())],
        [KeyboardButton(TelegramCommand.HELP.get_call_name())],
    ]
    if status == SurveyStatus.WAITING_DOCS.value:
        keyboard.insert(
            1,
            [KeyboardButton(TelegramCommand.PROCESSING.get_call_name())],
        )

    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
    )


def __get_command_text(status) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

    Args:
        status: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞

    Returns:
        str: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    commands = [
        f"{TelegramCommand.START.get_call_name()} - –ü—Ä–æ–π—Ç–∏(–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏) –æ–ø—Ä–æ—Å",
        f"{TelegramCommand.STATUS.get_call_name()} - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞",
        f"{TelegramCommand.HELP.get_call_name()} - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏",
    ]
    if status == SurveyStatus.WAITING_DOCS.value:
        commands.insert(
            1,
            f"{TelegramCommand.PROCESSING.get_call_name()} "
            "- –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        )
    return "\n".join(commands)


async def help_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    status: str | None = None,
):
    """
    –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏

    Args:
        update:
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
        status: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    """
    if status is None:
        user = update.effective_user
        user_obj = await get_or_create_user(user)
        _, __, result, survey = await get_or_create_survey(user_obj, False)
        status = survey.status

    processing_text = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º "
        "–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        if status == SurveyStatus.PROCESSING.value
        else ""
    )

    help_text = f"""
–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞: {SurveyStatus.get_ext_label(status)}
{processing_text}
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

{__get_command_text(status)}

üí° *–°–æ–≤–µ—Ç—ã:*
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ /help
"""
    await update.message.reply_text(
        help_text,
        reply_markup=_get_default_help_keyboard(status),
        parse_mode="Markdown",  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )


def _load_documents_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Returns:
        ReplyKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏
    """
    keyboard = [
        [KeyboardButton(TelegramCommand.PROCESSING.get_call_name())],
        [KeyboardButton(TelegramCommand.HELP.get_call_name())],
    ]
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
    )


async def load_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    load_result: bool | None = None,
    photo_file_id: int | None = None,
    is_pdf: bool | None = None,
):
    """
    –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏

    Args:
        update:
        context: –∫–æ–Ω—Ç–µ–∫—Å—Ç
        load_result: bool - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞,
            None - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        photo_file_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
    """
    reply_markup = None
    if load_result is None:
        help_text = f"""
üìã *–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤*

–ö–æ–º–∞–Ω–¥—ã:
{TelegramCommand.PROCESSING.get_call_name()} - –∑–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
{TelegramCommand.HELP.get_call_name()} - –ø–æ–º–æ—â—å
"""
        reply_markup = _load_documents_keyboard()
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )
    else:
        caption = (
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!"
            if load_result
            else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        )
        if is_pdf:
            await update.message.reply_document(
                document=photo_file_id,
                caption=caption,
            )
        elif photo_file_id:
            await update.message.reply_photo(
                photo=photo_file_id,
                caption=caption,
            )
        else:
            await update.message.reply_text(
                caption,
                reply_markup=_load_documents_keyboard(),
            )
